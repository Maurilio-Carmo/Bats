@ECHO OFF
COLOR 6
SETLOCAL ENABLEDELAYEDEXPANSION

SET BAT_PATH=C:\SYSPDV\BAT
SET MIGR_ARQ=%BAT_PATH%\REQUISITOS.SQL
SET LOG_PATH=%BAT_PATH%\Log_Config.txt
	
    :: Verifica se o diretório existe
IF EXIST "%BAT_PATH%" (
    RD /S /Q "%BAT_PATH%"
)

	:: Cria o diretório
MD "%BAT_PATH%"
    
    ECHO.
    ECHO   ==================================
    ECHO.
    ECHO               [INICIADO]
    ECHO.
    ECHO       %DATE% as %TIME%
    ECHO.
    ECHO   ==================================
    ECHO.
    (
        ECHO.
        ECHO   ==================================
        ECHO.
        ECHO               [INICIADO]
        ECHO.
        ECHO       %DATE% as %TIME%
        ECHO.
        ECHO   ==================================
        ECHO.
    ) > "%LOG_PATH%"

:SERVER
	:: Verifica SGBD do Server
FOR /F "TOKENS=2*" %%A IN ('REG QUERY "HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432NODE\SYSPDV_SERVER\UNICONNECTION" /V "PROVIDERNAME" ^| MORE') DO SET SGBD_SERVER=%%B

	:: Verificar IP do Server
FOR /F "TOKENS=3" %%A IN ('REG QUERY "HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432NODE\SYSPDV_SERVER\UNICONNECTION" /V "SERVER" ^| MORE') DO SET IP_SERVER=%%A

	ECHO.
	ECHO   ==================================
	ECHO.
	ECHO               [SERVER]
	ECHO.
	ECHO             [!SGBD_SERVER!]
	ECHO.
	ECHO             [!IP_SERVER!]
	ECHO.
	ECHO   ==================================
	ECHO.
	(
		ECHO.
		ECHO   ==================================
		ECHO.
		ECHO               [SERVER]
		ECHO.
		ECHO             [!SGBD_SERVER!]
		ECHO.
		ECHO             [!IP_SERVER!]
		ECHO.
		ECHO   ==================================
		ECHO.
	) >> "%LOG_PATH%"
	TIMEOUT /T 2
	CLS

IF "!SGBD_SERVER!"=="SQL Server" (
	ECHO.
	ECHO   ==================================
	ECHO.
	ECHO          [BANCO CONFIGURADO]
	ECHO.
	ECHO   ==================================
	ECHO.
	) ELSE (
		ECHO.
	    ECHO   ==================================
	    ECHO.
		ECHO                [ERRO]
		ECHO.
	    ECHO        [BANCO NAO CONFIGURADO]
	    ECHO.
	    ECHO   ==================================
	    ECHO.
		(
			ECHO.
			ECHO   ==================================
			ECHO.
			ECHO                [ERRO]
			ECHO.
			ECHO     [BANCO NAO CONFIGURADO - F10]
			ECHO.
			ECHO   ==================================
			ECHO.
		) >> "%LOG_PATH%"
        GOTO END
	)
	TIMEOUT /T 2
	CLS

	:: Gera arquivo para importacao
	ECHO.
	ECHO   ==================================
	ECHO.
	ECHO          [GERANDO ALTERACOES]
	ECHO.
	ECHO   ==================================
	ECHO.
    ECHO   Processando...
	(
        ECHO.
        ECHO   ==================================
        ECHO.
        ECHO          [GERANDO ALTERACOES]
        ECHO.
        ECHO   ==================================
        ECHO.
	) >> "%LOG_PATH%"
	TIMEOUT /T 2
	CLS
    
	:: CRIAÇÃO DA TABELA DE ENDEREÇOS DO CLIENTE
	:: Esta tabela armazena os múltiplos endereços associados a cada cliente,
	:: incluindo endereços principais, de entrega e cobrança, com informações completas
	:: de localização e códigos de referência

(
	ECHO CREATE TABLE [dbo].[CLIENTE_ENDERECO]^(
	ECHO 	[CLICOD] [varchar]^(15^) NOT NULL,
	ECHO 	[CLIENDCOD] [bigint] NOT NULL,
	ECHO 	[CLIENDPRC] [char]^(1^) NOT NULL,
	ECHO 	[CLIENDLOG] [varchar]^(45^) NULL,
	ECHO 	[CLIENDNUM] [varchar]^(6^) NULL,
	ECHO 	[CLIENDCMP] [varchar]^(15^) NULL,
	ECHO 	[CLIENDCEP] [varchar]^(8^) NULL,
	ECHO 	[CLIENDBAI] [varchar]^(20^) NULL,
	ECHO 	[CLIENDCID] [varchar]^(40^) NULL,
	ECHO 	[CLIENDEST] [char]^(2^) NULL,
	ECHO 	[CLIENDCODIBGE] [char]^(7^) NULL,
	ECHO 	[CLIENDENT] [char]^(1^) NOT NULL,
	ECHO 	[CLIENDPRDENT] [char]^(1^) NOT NULL,
	ECHO 	[CLIENDCOB] [char]^(1^) NOT NULL,
	ECHO 	[CLIENDPRDCOB] [char]^(1^) NOT NULL,
	ECHO 	CONSTRAINT [PK_CLIENTE_ENDERECO] PRIMARY KEY CLUSTERED ^(
	ECHO 		[CLICOD] ASC,
	ECHO 		[CLIENDCOD] ASC,
	ECHO 		[CLIENDPRC] ASC
	ECHO 	^) WITH ^(
	ECHO 		PAD_INDEX = OFF,
	ECHO 		STATISTICS_NORECOMPUTE = OFF,
	ECHO 		IGNORE_DUP_KEY = OFF,
	ECHO 		ALLOW_ROW_LOCKS = ON,
	ECHO 		ALLOW_PAGE_LOCKS = ON
	ECHO 	^) ON [PRIMARY],
	ECHO 	CONSTRAINT [UQ_UNICO_PRINCIPAL] UNIQUE NONCLUSTERED ^(
	ECHO 		[CLICOD] ASC,
	ECHO 		[CLIENDCOD] ASC,
	ECHO 		[CLIENDPRC] ASC
	ECHO 	^) WITH ^(
	ECHO 		PAD_INDEX = OFF,
	ECHO 		STATISTICS_NORECOMPUTE = OFF,
	ECHO 		IGNORE_DUP_KEY = OFF,
	ECHO 		ALLOW_ROW_LOCKS = ON,
	ECHO 		ALLOW_PAGE_LOCKS = ON
	ECHO 	^) ON [PRIMARY]
	ECHO ^) ON [PRIMARY];
	ECHO.
	ECHO GO
	ECHO.
) >> "%MIGR_ARQ%"

	:: TRIGGER DE CONTROLE PARA INSERÇÃO E ATUALIZAÇÃO DE ENDEREÇOS
	:: Este trigger garante a integridade dos dados ao:
	:: 1. Gerar automaticamente códigos sequenciais para novos endereços
	:: 2. Manter apenas um endereço marcado como principal por cliente
	:: 3. Validar as relações entre endereços preferenciais e flags de entrega/cobrança

(
	ECHO CREATE TRIGGER [dbo].[TRI_BEF_INS_UPD_CLI_END] ON [dbo].[CLIENTE_ENDERECO] INSTEAD OF 
	ECHO INSERT, UPDATE
	ECHO 	AS BEGIN
	ECHO SET NOCOUNT ON;
	ECHO.
	ECHO DECLARE @CLIENTE_ENDERECO_TMP TABLE ^(
	ECHO 	CLICOD VARCHAR^(15^),
	ECHO 	CLIENDCOD INT,
	ECHO 	CLIENDPRC CHAR^(1^),
	ECHO 	CLIENDLOG VARCHAR^(45^),
	ECHO 	CLIENDNUM VARCHAR^(6^),
	ECHO 	CLIENDCMP VARCHAR^(15^),
	ECHO 	CLIENDCEP VARCHAR^(8^),
	ECHO 	CLIENDBAI VARCHAR^(20^),
	ECHO 	CLIENDCID VARCHAR^(40^),
	ECHO 	CLIENDEST CHAR^(2^),
	ECHO 	CLIENDCODIBGE CHAR^(7^),
	ECHO 	CLIENDENT CHAR^(1^),
	ECHO 	CLIENDPRDENT CHAR^(1^),
	ECHO 	CLIENDCOB CHAR^(1^),
	ECHO 	CLIENDPRDCOB CHAR^(1^)
	ECHO ^);
	ECHO.
	ECHO IF ^(NOT EXISTS ^(SELECT 1 FROM DELETED^)^)
	ECHO DELETE FROM CLIENTE_ENDERECO
	ECHO 	WHERE EXISTS 
	ECHO 		^(SELECT 1 FROM CLIENTE_ENDERECO CE
	ECHO 			INNER JOIN INSERTED I ON CE.CLICOD = I.CLICOD
	ECHO 			AND CE.CLIENDCOD = I.CLIENDCOD
	ECHO 			AND CE.CLIENDPRC = I.CLIENDPRC
	ECHO 				WHERE CLIENTE_ENDERECO.CLICOD = CE.CLICOD
	ECHO 					AND CLIENTE_ENDERECO.CLIENDCOD = CE.CLIENDCOD
	ECHO 					AND CLIENTE_ENDERECO.CLIENDPRC = CE.CLIENDPRC
	ECHO 		^);
	ECHO.
	ECHO INSERT INTO @CLIENTE_ENDERECO_TMP ^(
	ECHO 		CLICOD,
	ECHO 		CLIENDCOD,
	ECHO 		CLIENDPRC,
	ECHO 		CLIENDLOG,
	ECHO 		CLIENDNUM,
	ECHO 		CLIENDCMP,
	ECHO 		CLIENDCEP,
	ECHO 		CLIENDBAI,
	ECHO 		CLIENDCID,
	ECHO 		CLIENDEST,
	ECHO 		CLIENDCODIBGE,
	ECHO 		CLIENDPRDENT,
	ECHO 		CLIENDENT,
	ECHO 		CLIENDPRDCOB,
	ECHO 		CLIENDCOB
	ECHO ^)
	ECHO SELECT
	ECHO 	I.CLICOD,
	ECHO 	CASE WHEN ^(I.CLIENDCOD ^<^> 0 OR COALESCE^(I.CLIENDCOD, ''^) ^<^> ''
	ECHO 		^) THEN ^(
	ECHO 			SELECT
	ECHO 				COALESCE^(MAX^(CE.CLIENDCOD^) + 1, I.CLIENDCOD^)
	ECHO 			FROM CLIENTE_ENDERECO CE
	ECHO 			WHERE
	ECHO 				CE.CLICOD = I.CLICOD
	ECHO 				AND EXISTS ^(
	ECHO 					SELECT * FROM CLIENTE_ENDERECO CE2
	ECHO 						WHERE CE2.CLICOD = CE.CLICOD
	ECHO 							AND CE2.CLIENDCOD = I.CLIENDCOD
	ECHO 				^)
	ECHO 				AND NOT EXISTS ^(
	ECHO 					SELECT * FROM DELETED D
	ECHO 						WHERE D.CLICOD = I.CLICOD
	ECHO 							AND D.CLIENDCOD = I.CLIENDCOD
	ECHO 				^)
	ECHO 		^) ELSE ^(
	ECHO 			SELECT
	ECHO 				COALESCE^(MAX^(CE.CLIENDCOD^), 0^) + 1
	ECHO 			FROM CLIENTE_ENDERECO CE
	ECHO 				WHERE CE.CLICOD = I.CLICOD
	ECHO 		^)
	ECHO 	END AS CLIENDCOD,
	ECHO 	CASE WHEN ^(I.CLIENDPRC = 'S'^) THEN ^(
	ECHO 			SELECT
	ECHO 				CASE WHEN COUNT^(CE.CLIENDCOD^) ^> 0 THEN 'N' ELSE 'S' END
	ECHO 			FROM CLIENTE_ENDERECO CE
	ECHO 				WHERE CE.CLICOD = I.CLICOD
	ECHO 					AND CE.CLIENDCOD ^<^> I.CLIENDCOD
	ECHO 					AND CLIENDPRC = 'S'
	ECHO 		^)
	ECHO 		WHEN ^(I.CLIENDPRC = 'N'^)
	ECHO 		AND EXISTS ^(SELECT 1 FROM DELETED D
	ECHO 		^) THEN ^(
	ECHO 			SELECT
	ECHO 				CASE WHEN COUNT^(CE.CLIENDCOD^) = 0 THEN 'S' ELSE 'N' END
	ECHO 			FROM CLIENTE_ENDERECO CE
	ECHO 				WHERE CE.CLICOD = I.CLICOD
	ECHO 					AND CE.CLIENDCOD ^<^> I.CLIENDCOD
	ECHO 					AND CLIENDPRC = 'S'
	ECHO 		^) ELSE I.CLIENDPRC END AS CLIENDPRC,
	ECHO 	I.CLIENDLOG,
	ECHO 	I.CLIENDNUM,
	ECHO 	I.CLIENDCMP,
	ECHO 	I.CLIENDCEP,
	ECHO 	I.CLIENDBAI,
	ECHO 	I.CLIENDCID,
	ECHO 	I.CLIENDEST,
	ECHO 	I.CLIENDCODIBGE,
	ECHO 	CASE WHEN ^(I.CLIENDPRDENT = 'S' AND I.CLIENDENT ^<^> 'S'^) THEN 'N' ELSE I.CLIENDPRDENT END AS CLIENDPRDENT,
	ECHO 	I.CLIENDENT,
	ECHO 	CASE WHEN ^(I.CLIENDPRDCOB = 'S' AND I.CLIENDCOB ^<^> 'S'^) THEN 'N' ELSE I.CLIENDPRDCOB END AS CLIENDPRDCOB,
	ECHO 	I.CLIENDCOB
	ECHO FROM INSERTED I;
	ECHO.
	ECHO UPDATE CLIENTE_ENDERECO
	ECHO SET
	ECHO 	CLIENDPRDENT = 'N'
	ECHO FROM CLIENTE_ENDERECO CE
	ECHO 	INNER JOIN @CLIENTE_ENDERECO_TMP MR ON CE.CLICOD = MR.CLICOD
	ECHO 		WHERE CE.CLIENDCOD ^<^> MR.CLIENDCOD
	ECHO 			AND CE.CLIENDPRDENT = 'S'
	ECHO 			AND MR.CLIENDENT = 'S'
	ECHO 			AND MR.CLIENDPRDENT = 'S';
	ECHO.
	ECHO UPDATE CLIENTE_ENDERECO
	ECHO SET
	ECHO 	CLIENDPRDCOB = 'N'
	ECHO FROM CLIENTE_ENDERECO CE
	ECHO 	INNER JOIN @CLIENTE_ENDERECO_TMP MR ON CE.CLICOD = MR.CLICOD
	ECHO 		WHERE CE.CLIENDCOD ^<^> MR.CLIENDCOD
	ECHO 			AND CE.CLIENDPRDCOB = 'S'
	ECHO 			AND MR.CLIENDCOB = 'S'
	ECHO 			AND MR.CLIENDPRDCOB = 'S';
	ECHO.
	ECHO MERGE INTO CLIENTE_ENDERECO AS TABELA_DESTINO USING @CLIENTE_ENDERECO_TMP AS TABELA_TEMP ON TABELA_DESTINO.CLICOD = TABELA_TEMP.CLICOD
	ECHO AND TABELA_DESTINO.CLIENDCOD = TABELA_TEMP.CLIENDCOD
	ECHO WHEN MATCHED THEN
	ECHO UPDATE
	ECHO SET
	ECHO 	CLIENDPRC = TABELA_TEMP.CLIENDPRC,
	ECHO 	CLIENDLOG = TABELA_TEMP.CLIENDLOG,
	ECHO 	CLIENDNUM = TABELA_TEMP.CLIENDNUM,
	ECHO 	CLIENDCMP = TABELA_TEMP.CLIENDCMP,
	ECHO 	CLIENDCEP = TABELA_TEMP.CLIENDCEP,
	ECHO 	CLIENDBAI = TABELA_TEMP.CLIENDBAI,
	ECHO 	CLIENDCID = TABELA_TEMP.CLIENDCID,
	ECHO 	CLIENDEST = TABELA_TEMP.CLIENDEST,
	ECHO 	CLIENDCODIBGE = TABELA_TEMP.CLIENDCODIBGE,
	ECHO 	CLIENDENT = TABELA_TEMP.CLIENDENT,
	ECHO 	CLIENDPRDENT = TABELA_TEMP.CLIENDPRDENT,
	ECHO 	CLIENDCOB = TABELA_TEMP.CLIENDCOB,
	ECHO 	CLIENDPRDCOB = TABELA_TEMP.CLIENDPRDCOB
	ECHO 	WHEN NOT MATCHED BY TARGET THEN
	ECHO 	INSERT^(
	ECHO 			CLICOD,
	ECHO 			CLIENDCOD,
	ECHO 			CLIENDPRC,
	ECHO 			CLIENDLOG,
	ECHO 			CLIENDNUM,
	ECHO 			CLIENDCMP,
	ECHO 			CLIENDCEP,
	ECHO 			CLIENDBAI,
	ECHO 			CLIENDCID,
	ECHO 			CLIENDEST,
	ECHO 			CLIENDCODIBGE,
	ECHO 			CLIENDPRDENT,
	ECHO 			CLIENDENT,
	ECHO 			CLIENDPRDCOB,
	ECHO 			CLIENDCOB
	ECHO 		^) VALUES ^(
	ECHO 			TABELA_TEMP.CLICOD,
	ECHO 			TABELA_TEMP.CLIENDCOD,
	ECHO 			TABELA_TEMP.CLIENDPRC,
	ECHO 			TABELA_TEMP.CLIENDLOG,
	ECHO 			TABELA_TEMP.CLIENDNUM,
	ECHO 			TABELA_TEMP.CLIENDCMP,
	ECHO 			TABELA_TEMP.CLIENDCEP,
	ECHO 			TABELA_TEMP.CLIENDBAI,
	ECHO 			TABELA_TEMP.CLIENDCID,
	ECHO 			TABELA_TEMP.CLIENDEST,
	ECHO 			TABELA_TEMP.CLIENDCODIBGE,
	ECHO 			TABELA_TEMP.CLIENDPRDENT,
	ECHO 			TABELA_TEMP.CLIENDENT,
	ECHO 			TABELA_TEMP.CLIENDPRDCOB,
	ECHO 			TABELA_TEMP.CLIENDCOB
	ECHO 		^);
	ECHO.
	ECHO SET NOCOUNT OFF;
	ECHO.
	ECHO END;
	ECHO.
	ECHO GO
	ECHO.
) >> "%MIGR_ARQ%"

	:: TRIGGER DE SINCRONIZAÇÃO DE DADOS DO CLIENTE PARA ENDEREÇOS PRINCIPAIS
	:: Este trigger é executado após inserções/atualizações na tabela CLIENTE e:
	:: 1. Temporariamente desativa o trigger da tabela CLIENTE_ENDERECO para evitar loops
	:: 2. Atualiza o endereço principal na tabela CLIENTE_ENDERECO quando:
	::	- Há alteração nos campos de endereço na tabela CLIENTE
	::	- O registro corresponde ao endereço principal ^(CLIENDPRC = 'S'^)
	:: 3. Insere um novo endereço principal caso o cliente não possua nenhum cadastrado
	:: 4. Reativa o trigger da tabela CLIENTE_ENDERECO ao final

(
	ECHO CREATE TRIGGER [dbo].[TRI_AFT_INS_UPD_CLIENTE] ON [dbo].[CLIENTE] 
	ECHO AFTER 
	ECHO INSERT, UPDATE
	ECHO 	AS BEGIN
	ECHO SET NOCOUNT ON;
	ECHO.
	ECHO DISABLE TRIGGER [dbo].[TRI_AFT_INS_UPD_CLI_END] ON [dbo].[CLIENTE_ENDERECO];
	ECHO.
	ECHO UPDATE CLIENTE_ENDERECO
	ECHO SET
	ECHO 	CLIENDLOG = I.CLIEND,
	ECHO 	CLIENDNUM = I.CLINUM,
	ECHO 	CLIENDCMP = I.CLICMP,
	ECHO 	CLIENDCEP = I.CLICEP,
	ECHO 	CLIENDBAI = I.CLIBAI,
	ECHO 	CLIENDCID = I.CLICID,
	ECHO 	CLIENDEST = I.CLIEST,
	ECHO 	CLIENDCODIBGE = I.CLICODIGOIBGE
	ECHO FROM CLIENTE_ENDERECO CE
	ECHO 	INNER JOIN INSERTED I ON CE.CLICOD = I.CLICOD
	ECHO 	INNER JOIN DELETED D ON D.CLICOD = CE.CLICOD
	ECHO 		WHERE CE.CLIENDPRC = 'S'
	ECHO 			AND ^(I.CLICEP ^<^> D.CLICEP
	ECHO 				OR I.CLIEND ^<^> D.CLIEND
	ECHO 				OR I.CLINUM ^<^> D.CLINUM
	ECHO 				OR I.CLICMP ^<^> D.CLICMP
	ECHO 				OR I.CLIBAI ^<^> D.CLIBAI
	ECHO 				OR I.CLICID ^<^> D.CLICID
	ECHO 				OR I.CLIEST ^<^> D.CLIEST
	ECHO 				OR I.CLICODIGOIBGE ^<^> D.CLICODIGOIBGE
	ECHO 			^);
	ECHO.
	ECHO INSERT INTO CLIENTE_ENDERECO ^(
	ECHO 		CLICOD,
	ECHO 		CLIENDPRC,
	ECHO 		CLIENDLOG,
	ECHO 		CLIENDNUM,
	ECHO 		CLIENDCMP,
	ECHO 		CLIENDCEP,
	ECHO 		CLIENDBAI,
	ECHO 		CLIENDCID,
	ECHO 		CLIENDEST,
	ECHO 		CLIENDCODIBGE,
	ECHO 		CLIENDENT,
	ECHO 		CLIENDPRDENT,
	ECHO 		CLIENDCOB,
	ECHO 		CLIENDPRDCOB
	ECHO 	^) SELECT
	ECHO 	I.CLICOD,
	ECHO 	'S',
	ECHO 	I.CLIEND,
	ECHO 	I.CLINUM,
	ECHO 	I.CLICMP,
	ECHO 	I.CLICEP,
	ECHO 	I.CLIBAI,
	ECHO 	I.CLICID,
	ECHO 	I.CLIEST,
	ECHO 	I.CLICODIGOIBGE,
	ECHO 	'S',
	ECHO 	'S',
	ECHO 	'S',
	ECHO 	'S'
	ECHO FROM INSERTED I
	ECHO 	WHERE NOT EXISTS 
	ECHO 		^(SELECT 1 FROM CLIENTE_ENDERECO CE WHERE CE.CLICOD = I.CLICOD AND CE.CLIENDPRC = 'S'^);
	ECHO.
	ECHO ENABLE TRIGGER [dbo].[TRI_AFT_INS_UPD_CLI_END] ON [dbo].[CLIENTE_ENDERECO];
	ECHO.
	ECHO SET NOCOUNT OFF;
	ECHO.
	ECHO END;
	ECHO.
	ECHO GO
	ECHO.
) >> "%MIGR_ARQ%"

	:: TRIGGER DE LIMPEZA DE ENDEREÇOS APÓS EXCLUSÃO DE CLIENTE
	:: Este trigger é executado após a exclusão de registros na tabela CLIENTE e:
	:: 1. Remove automaticamente todos os endereços vinculados ao cliente excluído
	:: 2. Garante a integridade referencial do banco de dados
	:: 3. Executa uma limpeza em cascata dos registros relacionados

(
	ECHO CREATE TRIGGER [dbo].[TRI_AFTER_DELETE_CLIENTE] ON [dbo].[CLIENTE]
	ECHO AFTER
	ECHO 	DELETE AS BEGIN
	ECHO SET NOCOUNT ON;
	ECHO.
	ECHO DELETE FROM CLIENTE_ENDERECO
	ECHO 	WHERE CLICOD IN ^(SELECT CLICOD FROM DELETED^);
	ECHO.
	ECHO SET NOCOUNT OFF;
	ECHO.
	ECHO END;
	ECHO.
	ECHO GO
	ECHO.
) >> "%MIGR_ARQ%"

	:: MIGRAÇÃO DE ENDEREÇOS DA TABELA CLIENTE PARA CLIENTE_ENDERECO
	:: Insere os endereços existentes na tabela CLIENTE como endereços principais
	:: na nova estrutura de múltiplos endereços ^(CLIENTE_ENDERECO^)
	:: Apenas para clientes que ainda não possuem endereços cadastrados

(
	ECHO INSERT INTO CLIENTE_ENDERECO ^(
	ECHO 		CLICOD,
	ECHO 		CLIENDPRC,
	ECHO 		CLIENDLOG,
	ECHO 		CLIENDNUM,
	ECHO 		CLIENDCMP,
	ECHO 		CLIENDCEP,
	ECHO 		CLIENDBAI,
	ECHO 		CLIENDCID,
	ECHO 		CLIENDEST,
	ECHO 		CLIENDCODIBGE,
	ECHO 		CLIENDENT,
	ECHO 		CLIENDPRDENT,
	ECHO 		CLIENDCOB,
	ECHO 		CLIENDPRDCOB
	ECHO 	^) SELECT
	ECHO 	C.CLICOD,
	ECHO 	'S',
	ECHO 	C.CLIEND,
	ECHO 	C.CLINUM,
	ECHO 	C.CLICMP,
	ECHO 	C.CLICEP,
	ECHO 	C.CLIBAI,
	ECHO 	C.CLICID,
	ECHO 	C.CLIEST,
	ECHO 	C.CLICODIGOIBGE,
	ECHO 	'S',
	ECHO 	'S',
	ECHO 	'S',
	ECHO 	'S'
	ECHO FROM CLIENTE C
	ECHO 	WHERE NOT EXISTS 
	ECHO 		^(SELECT 1 FROM CLIENTE_ENDERECO CE WHERE CE.CLICOD = C.CLICOD^);
	ECHO.
	ECHO GO
	ECHO.
) >> "%MIGR_ARQ%"

	:: MIGRAÇÃO DE ENDEREÇOS DE COBRANÇA DA TABELA CLIENTE PARA CLIENTE_ENDERECO
	:: Insere os endereços de cobrança existentes na tabela CLIENTE como novos registros
	:: na tabela CLIENTE_ENDERECO, marcando-os especificamente para cobrança ^('S'^).
	:: Apenas insere quando:
	:: 1. Existem dados válidos nos campos de endereço de cobrança
	:: 2. O endereço de cobrança é diferente do endereço principal do cliente
(
	ECHO INSERT INTO CLIENTE_ENDERECO ^(
	ECHO 		CLICOD,
	ECHO 		CLIENDPRC,
	ECHO 		CLIENDLOG,
	ECHO 		CLIENDNUM,
	ECHO 		CLIENDCMP,
	ECHO 		CLIENDCEP,
	ECHO 		CLIENDBAI,
	ECHO 		CLIENDCID,
	ECHO 		CLIENDEST,
	ECHO 		CLIENDCODIBGE,
	ECHO 		CLIENDENT,
	ECHO 		CLIENDPRDENT,
	ECHO 		CLIENDCOB,
	ECHO 		CLIENDPRDCOB
	ECHO 	^) SELECT
	ECHO 	C.CLICOD,
	ECHO 	'N',
	ECHO 	C.CLIENDCOB,
	ECHO 	C.CLINUMCOB,
	ECHO 	C.CLICMPCOB,
	ECHO 	C.CLICEPCOB,
	ECHO 	C.CLIBAICOB,
	ECHO 	C.CLICIDCOB,
	ECHO 	C.CLIESTCOB,
	ECHO 	C.CLICODIGOIBGE,
	ECHO 	'N',
	ECHO 	'N',
	ECHO 	'S',
	ECHO 	'S'
	ECHO FROM CLIENTE C
	ECHO 	WHERE
	ECHO 		^(COALESCE^(C.CLIENDCOB, ''^) ^<^> ''
	ECHO 			OR COALESCE^(C.CLINUMCOB, ''^) ^<^> ''
	ECHO 			OR COALESCE^(C.CLICMPCOB, ''^) ^<^> ''
	ECHO 			OR COALESCE^(C.CLICEPCOB, ''^) ^<^> ''
	ECHO 			OR COALESCE^(C.CLIBAICOB, ''^) ^<^> ''
	ECHO 			OR COALESCE^(C.CLICIDCOB, ''^) ^<^> ''
	ECHO 			OR COALESCE^(C.CLIESTCOB, ''^) ^<^> ''
	ECHO 		^) AND ^(
	ECHO 			COALESCE^(C.CLIENDCOB, ''^) ^<^> C.CLIEND
	ECHO 			AND COALESCE^(C.CLINUMCOB, ''^) ^<^> C.CLINUM
	ECHO 			AND COALESCE^(C.CLICEPCOB, ''^) ^<^> C.CLICEP
	ECHO 		^);
	ECHO.
	ECHO GO
	ECHO.
) >> "%MIGR_ARQ%"

	:: TRIGGER DE SINCRONIZAÇÃO DE ENDEREÇOS DE COBRANÇA
	:: Este trigger é executado após inserções/atualizações na tabela CLIENTE_ENDERECO e:
	:: 1. Temporariamente desativa o trigger da tabela CLIENTE para evitar loops
	:: 2. Atualiza os campos de cobrança na tabela CLIENTE quando:
	::	- O endereço em CLIENTE_ENDERECO está marcado como de cobrança ^('S'^)
	::	- E é o endereço preferencial para cobrança ^('S'^)
	:: 3. Reativa o trigger da tabela CLIENTE ao final

(
	ECHO CREATE TRIGGER [dbo].[TRI_AFT_INS_UPD_CLI_END] ON [dbo].[CLIENTE_ENDERECO] 
	ECHO AFTER 
	ECHO INSERT, UPDATE
	ECHO 	AS BEGIN
	ECHO SET NOCOUNT ON;
	ECHO.
	ECHO DISABLE TRIGGER [dbo].[TRI_AFT_INS_UPD_CLIENTE] ON [dbo].[CLIENTE];
	ECHO.
	ECHO UPDATE CLIENTE
	ECHO 	SET
	ECHO 		CLIENDCOB = I.CLIENDLOG,
	ECHO 		CLINUMCOB = I.CLIENDNUM,
	ECHO 		CLICMPCOB = I.CLIENDCMP,
	ECHO 		CLICEPCOB = I.CLIENDCEP,
	ECHO 		CLIBAICOB = I.CLIENDBAI,
	ECHO 		CLICIDCOB = I.CLIENDCID,
	ECHO 		CLIESTCOB = I.CLIENDEST
	ECHO FROM CLIENTE C
	ECHO 	INNER JOIN INSERTED I ON C.CLICOD = I.CLICOD
	ECHO 		WHERE I.CLIENDCOB = 'S'
	ECHO 			AND I.CLIENDPRDCOB = 'S';
	ECHO.
	ECHO ENABLE TRIGGER [dbo].[TRI_AFT_INS_UPD_CLIENTE] ON [dbo].[CLIENTE];
	ECHO.
	ECHO SET NOCOUNT OFF;
	ECHO.
	ECHO END;
	ECHO.
	ECHO GO
) >> "%MIGR_ARQ%"

		:: Inicia Alterações no Banco do Servidor
	ECHO.
	ECHO   ==================================
	ECHO.
	ECHO        [REALIZANDO ALTERACOES]
	ECHO.
	ECHO   ==================================
	ECHO.
	ECHO   Processando...
	(
		ECHO.
		ECHO   ==================================
		ECHO.
		ECHO        [REALIZANDO ALTERACOES]
		ECHO.
		ECHO   ==================================
		ECHO.
	) >> "%LOG_PATH%"
	
	SQLCMD -s !IP_SERVER! -d syspdv -e -i %MIGR_ARQ% >> "%LOG_PATH%" 2>&1 

	TIMEOUT /T 2
	CLS

    ECHO.
    ECHO   ==================================
    ECHO.
    ECHO         [ALTERACOES CONCLUIDAS]
    ECHO.
    ECHO      VERIFIQUE O LOG DE ALTERACOES
    ECHO.
    ECHO      %LOG_PATH%
    ECHO.
    ECHO   ==================================
    ECHO.
	(
		ECHO.
		ECHO   ==================================
		ECHO.
		ECHO        [ALTERACOES CONCLUIDAS]
		ECHO.
		ECHO   ==================================
		ECHO.
	) >> "%LOG_PATH%"
	TIMEOUT /T 2
	CLS

:END
    ECHO.
    ECHO   ==================================
    ECHO.
    ECHO              [FINALIZADO]
    ECHO.
    ECHO       %DATE% as %TIME%
    ECHO.
    ECHO   ==================================
    ECHO.
    (
        ECHO.
        ECHO   ==================================
        ECHO.
        ECHO              [FINALIZADO]
        ECHO.
        ECHO       %DATE% as %TIME%
        ECHO.
        ECHO   ==================================
        ECHO.
    ) >> "%LOG_PATH%"
	TIMEOUT /T 2
	START %LOG_PATH%
	EXIT